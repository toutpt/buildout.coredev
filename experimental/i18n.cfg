[domain]
atcontenttypes = 
    plone.app.event
    Products.ATContentTypes
atreferencebrowserwidget =
    archetypes.referencebrowserwidget
passwordresettool =
    Products.PasswordResetTool
cmfplacefulworkflow =
    Products.CMFPlacefulWorkflow
cmfeditions =
    Products.CMFEditions
linguaplone =
    Products.LinguaPlone
tinymce =
    Products.TinyMCE
plone =
    Products.CMFPlone
    archetypes.kss
    plone.contentrules
    plone.fieldsets
    plone.i18n
    plone.locking
    plone.memoize
    plone.openid
    plone.portlets
    plone.portlet.collection
    plone.portlet.static
    plone.session
    plone.intelligenttext
    plone.app.contentmenu
    plone.app.content
    plone.app.contentrules
    plone.app.controlpanel
    plone.app.customerize
    plone.app.event
    plone.app.form
    plone.app.i18n
    plone.app.imaging
    plone.app.iterate
    plone.app.kss
    plone.app.layout
    plone.app.linkintegrity
    plone.app.portlets
# plone.app.openid have to be after plone.app.portlets for the moment
    plone.app.openid
    plone.app.redirector
    plone.app.users
    plone.app.viewletmanager
    plone.app.vocabularies
    plone.app.workflow
    plone.app.z3cform
    plone.stringinterp
    plonetheme.sunburst
    plonetheme.classic
    Products.Archetypes
    Products.CMFDiffTool
    Products.validation
# Plone 4.1
    plone.app.registry
# Plone 4.2
    archetypes.querywidget
    plone.app.collection
# no messages in plone.app.contentlisting
    plone.app.querystring
    plone.app.search
# Plone Future
plonefuture =
    plone.app.blocks
    plone.app.standardtiles
    plone.app.deco
    plone.app.page
plone.app.caching =
    plone.app.caching
plone.app.ldap =
    plone.app.ldap

[buildout]
extends =
    ../plips/plipbase.cfg
parts +=
    i18n
    i18n-update-all

eggs +=
    Products.LinguaPlone
    collective.js.jqueryui

auto-checkout +=
    collective.js.jqueryui
    plone.app.locales
    ${domain:atcontenttypes}
    ${domain:atreferencebrowserwidget}
    ${domain:passwordresettool}
    ${domain:cmfplacefulworkflow}
    ${domain:cmfeditions}
    ${domain:linguaplone}
    ${domain:tinymce}
    ${domain:plone}
    ${domain:plonefuture}
    ${domain:plone.app.caching}
    ${domain:plone.app.ldap}
# kupu, kupuconfig, kupupox domains
#    Products.kupu

[instance]
eggs +=
    Products.LinguaPlone
    plone.app.caching
zcml +=
    collective.js.jqueryui

[versions]
collective.recipe.template = 1.6

# to extract messages and merge po for the atcontenttypes domain:
# bin/i18n atcontentypes
[i18n]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    domain=$1
    localesdirectory="${buildout:directory}/../src/plone.app.locales/plone/app/locales/locales"
    src="${buildout:directory}/../src/"
    options=""
    exclude=""
    atcontenttypes="${domain:atcontenttypes}"
    atreferencebrowserwidget="${domain:atreferencebrowserwidget}"
    passwordresettool="${domain:passwordresettool}"
    cmfplacefulworkflow="${domain:cmfplacefulworkflow}"
    cmfeditions="${domain:cmfeditions}"
    linguaplone="${domain:linguaplone}"
    tinymce="${domain:tinymce}"
    plone="${domain:plone}"
    plonefuture="${domain:plonefuture}"
    ploneappcaching="${domain:plone.app.caching}"
    ploneappldap="${domain:plone.app.ldap}"
    if [ "$domain" == "atcontenttypes" ]; then
        packages=$atcontenttypes
        exclude="events.py"
    fi
    if [ "$domain" == "atreferencebrowserwidget" ]; then
        packages=$atreferencebrowserwidget
    fi
    if [ "$domain" == "passwordresettool" ]; then
        packages=$passwordresettool
    fi
    if [ "$domain" == "cmfplacefulworkflow" ]; then
        packages=$cmfplacefulworkflow
    fi
    if [ "$domain" == "cmfeditions" ]; then
        packages=$cmfeditions
    fi
    if [ "$domain" == "linguaplone" ]; then
        packages=$linguaplone
    fi
    if [ "$domain" == "tinymce" ]; then
        packages=$tinymce
        domain="plone.tinymce"
        localesdirectory=${buildout:directory}/../src/Products.TinyMCE/Products/TinyMCE/locales
    fi
    if [ "$domain" == "plone" ]; then
        packages=$plone
        options="--merge2 $localesdirectory/plone-generated.pot"
        exclude="rss_template.pt metadata_edit_form.cpt metadirectives.py Discussion_Item.xml event.py"
        # exclude event.py from plone.app.event because it's the atcontenttypes domain
    fi
    if [ "$domain" == "plonefuture" ]; then
        packages=$plonefuture
        fakedomain=plonefuture
        domain=plone
        localesdirectory="${buildout:directory}/../src/plone.app.locales/plone/app/locales/locales-future"
    fi
    if [ "$domain" == "plone.app.caching" ]; then
        packages=$ploneappcaching
        localesdirectory="${buildout:directory}/../src/plone.app.locales/plone/app/locales/locales-addons"
    fi
    if [ "$domain" == "plone.app.ldap" ]; then
        packages=$ploneappldap
        localesdirectory="${buildout:directory}/../src/plone.app.locales/plone/app/locales/locales-addons"
    fi
    potfile=$localesdirectory/$domain.pot
    potmanualfile=$localesdirectory/$domain-manual.pot
    cd $src
    i18ndude rebuild-pot --pot $potfile --create $domain \
    --merge $potmanualfile $options --exclude="$exclude" $packages
    # > rebuild-$domain-pot.log 2>&1
    if [ ! -z "$fakedomain" ]; then
        i18ndude filter $localesdirectory/plone.pot $localesdirectory/../locales/plone.pot > $localesdirectory/plone.pot_
        mv $localesdirectory/plone.pot_ $localesdirectory/plone.pot
    fi
    i18ndude sync --pot $potfile $localesdirectory/*/*/$domain.po
output = ${buildout:bin-directory}/i18n
mode = 755

[i18n-update-all]
recipe = collective.recipe.template
inline =
    #!/bin/bash
    # To see if there is any new message:
    # bin/i18n-update-all |grep -v "0 added, 0 removed"
    domains="atcontenttypes
    atreferencebrowserwidget
    passwordresettool
    cmfplacefulworkflow
    cmfeditions
    linguaplone
    tinymce
    plone
    plone.app.caching
    plone.app.ldap"
    for domain in $domains; do bin/i18n $domain; done
output = ${buildout:bin-directory}/i18n-update-all
mode = 755

[sources]
collective.js.jqueryui = svn https://svn.plone.org/svn/collective/collective.js.jqueryui/trunk
plone.app.blocks = git https://github.com/plone/plone.app.blocks
plone.app.deco = git https://github.com/plone/plone.app.deco
plone.app.event = git https://github.com/plone/plone.app.event
plone.app.ldap = git https://github.com/plone/plone.app.ldap
plone.app.page = git https://github.com/plone/plone.app.page
plone.app.standardtiles = git https://github.com/plone/plone.app.standardtiles
